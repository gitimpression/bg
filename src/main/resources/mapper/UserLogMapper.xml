<?xm1 version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bg.mapper.UserLogMapper">

    <sql id="SimpleUserLogColumn">
        `create_time`,`operation`,`ip`
    </sql>

    <sql id="UserLogColumn">
        `id`,`user_id`,`method`,`params`,`create_time`,`consume_time`,`operation`,`ip`
    </sql>
    <insert id="insertUserLog" parameterType="UserLog">
        insert into `user_log` (<include refid="UserLogColumn"/>)
        values (null, #{userId}, #{method},#{params},#{createTime},#{consumeTime},#{operation},#{ip});
    </insert>

    <select id="getSimpleUserLog" resultType="SimpleUserLog">
        select <include refid="SimpleUserLogColumn"/>
        from `user_log`
        where `user_id` = #{userId} and `method` != #{method} order by `create_time` desc
    </select>

    <select id="getAllUserLogPage" resultType="UserLog">
        select <include refid="UserLogColumn"/> from `user_log` order by `create_time` desc
    </select>

    <select id="getUserLogPage" resultType="UserLog">
        select * from `user_log` where `user_id` = #{userId} order by `create_time` desc
    </select>

    <select id="getSimpleUserLoginLog" resultType="SimpleUserLog">
        select <include refid="SimpleUserLogColumn"/> from `user_log`
        where `method` = #{method}
        and `user_id` = #{userId}
        order by `create_time` desc
    </select>
    <select id="getAllUserLogPageByCondition" resultType="UserLog">
        select * from `user_log`
        <trim prefix="where" suffixOverrides="and">
            <if test="userLog.userId != null">
                `user_id` = #{userLog.userId} and
            </if>
            <if test="userLog.method != null">
                `method` like concat('%',#{userLog.method},'%') and
            </if>
            <choose>
                <when test="createBeginTime != null and createEndTime != null and createBeginTime lt createEndTime">
                    `create_time` between #{createBeginTime} and #{createEndTime} and
                </when>
                <when test="createBeginTime != null and createEndTime != null and createBeginTime gt createEndTime">
                    `create_time` between #{createEndTime} and #{createBeginTime} and
                </when>
                <when test="createBeginTime == null and createEndTime != null">
                    `create_time`<![CDATA[ < ]]> #{createEndTime} and
                </when>
                <when test="createBeginTime != null and createEndTime == null">
                    `create_time`<![CDATA[ > ]]> #{createBeginTime} and
                </when>
            </choose>

            <choose>
                <when test="consumeBeginTime != null and consumeEndTime != null and consumeBeginTime lt consumeEndTime">
                    `consume_time` between #{consumeBeginTime} and #{consumeEndTime} and
                </when>
                <when test="consumeBeginTime != null and consumeEndTime != null and consumeBeginTime gt consumeEndTime">
                    `consume_time` between #{consumeEndTime} and #{consumeBeginTime} and
                </when>
                <when test="consumeBeginTime == null and consumeEndTime != null">
                    `consume_time`<![CDATA[ < ]]> #{consumeEndTime} and
                </when>
                <when test="consumeBeginTime != null and consumeEndTime == null">
                    `consume_time`<![CDATA[ > ]]> #{consumeBeginTime} and
                </when>
            </choose>

            <if test="userLog.ip != null">
                `ip` like concat('%',#{userLog.ip},'%') and
            </if>

        </trim>
--         where
--         `user_id` = 1 and
--         `method` like '%get%' and
--         `consume_time` between 0 and 50 AND
--         `create_time` between '2022-12-01' and '2022-12-02' and
--         `ip` like '%127%'
    </select>
</mapper>
